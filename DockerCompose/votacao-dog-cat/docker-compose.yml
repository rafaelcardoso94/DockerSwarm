version: "3.7"
services:
  redis: 
    image: redis:alpine
    ports:
      - "6379" #sem bindar com node, apenas declarando para uso interno
    networks: 
      - frontend #rede
    deploy:
      replicas: 2
      update_config:
        parallelism: 1 #caso realize algum update no serviço, ele atualiza um por um, no periodo de 10s
        delay: 10s
     #rollback_config:
       #prallelism: 1
       #delay: 10s
       #failure_action: pause --> pause o serviço, não continua o rollback
       #failure_action: continua --> nesse cenário acompanhar o rollback
       #monitor: 60s ---> monitorar o processo de rollback por esse periodo
      restart_policy:
        condition: on-failure #restartar em caso de falha
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager] #regra para o postgress subir somente em manager
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated #quando escolho a quantidade de replicas de um determinado serviço replicated
     #mode: global --> cria um container em cada nó
      replicas: 1
      labels: [APP=VOTING] #uma anotação
      restart_policy:
        condition: on-failure
        delay: 10s #delay de 10s em cada restart
        max_attempts: 3 #vai restartar apenas 3x caso necessario
        window: 120s
      placement:
        constraints: [node.role == manager]
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s #encerrei o visualizer, se ele não morreu nesse periodo ele encerra automaticamente
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
networks:
  frontend:
  backend:
volumes:
  db-data:
